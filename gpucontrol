#!/bin/bash
RED=$(tput setaf 1)
GREEN=$(tput setaf 2)
YELLOW=$(tput setaf 3)
BLUE=$(tput setaf 4)
MAGENTA=$(tput setaf 5)
CYAN=$(tput setaf 6)
BOLD=$(tput bold)
RESET=$(tput sgr0)
LOG_FILE="/var/log/gpucontrol.log"
INSTALL_DIR="@INSTALL_DIR@"
CONFIG_FILE="$INSTALL_DIR/config.sh"
GPU_MAX_FREQ=
ORIGINAL_GPU_MAX_FREQ=

if ! ( [[ -z "$1" ]] || [[ "$1" =~ ^(-h|--h|h|--help|-help|help|status)$ ]] ) && [[ "$(id -u)" -ne 0 ]]; then
    echo "${RED}GPUControl requires sudo to run.${RESET}"
    echo "  Try: sudo gpucontrol $*  or  sudo $0 $*"
    exit 1
fi

load_config() {
    if [ -f "$CONFIG_FILE" ]; then
        source "$CONFIG_FILE"
    fi
    validate_config
}

validate_config() {
    if [[ -z "$GPU_MAX_FREQ" || ! "$GPU_MAX_FREQ" =~ ^[0-9]+$ ]]; then
        GPU_MAX_FREQ=$ORIGINAL_GPU_MAX_FREQ
    fi
    if (( GPU_MAX_FREQ > ORIGINAL_GPU_MAX_FREQ )); then
        GPU_MAX_FREQ=$ORIGINAL_GPU_MAX_FREQ
    fi
}

save_config() {
    validate_config
    if [[ -f "$CONFIG_FILE" ]]; then
        if grep -q "^GPU_MAX_FREQ=" "$CONFIG_FILE"; then
            sed -i "s/^GPU_MAX_FREQ=.*/GPU_MAX_FREQ=$GPU_MAX_FREQ/" "$CONFIG_FILE"
        else
            echo "GPU_MAX_FREQ=$GPU_MAX_FREQ" >> "$CONFIG_FILE"
        fi
    fi
}

if [[ -f "$CONFIG_FILE" ]]; then
    source "$CONFIG_FILE"
    load_config
else
    echo "${RED}Error: GPU config file missing. Please re-run the installer.${RESET}"
    exit 1
fi

if ! [[ "$ORIGINAL_GPU_MAX_FREQ" =~ ^[0-9]+$ ]]; then
    echo "${RED}Error: Could not verify original max GPU frequency. Aborting.${RESET}"
    exit 1
fi

amd_set_max_freq() {
    local requested_freq="$1"
    local pp_od_file="$PP_OD_FILE"

    if (( requested_freq > ORIGINAL_GPU_MAX_FREQ )); then
        echo "${RED}Error: Requested frequency ($requested_freq MHz) exceeds original maximum ($ORIGINAL_GPU_MAX_FREQ MHz).${RESET}"
        exit 1
    fi

    if [[ -z "$pp_od_file" || ! -w "$pp_od_file" ]]; then
        echo "${RED}Error: Cannot write to pp_od_clk_voltage. Is the path valid and writable?${RESET}"
        exit 1
    fi

    local states_raw
    states_raw=$(grep '^s ' "$pp_od_file")
    if [[ -z "$states_raw" ]]; then
        echo "${RED}Error: Could not read current pp_od_clk_voltage states.${RESET}"
        exit 1
    fi

    local target_index
    if [[ "$AMD_SELECTED_SCLK_INDEX" =~ ^[0-9]+$ ]]; then
        target_index="$AMD_SELECTED_SCLK_INDEX"
    else
        target_index=$(echo "$states_raw" | tail -n1 | awk '{print $2}')
    fi

    local new_cmd=""
    while read -r _ idx freq volt; do
        if [[ "$idx" == "$target_index" ]]; then
            freq="$requested_freq"
        fi
        new_cmd+="s $idx $freq $volt\n"
    done <<< "$states_raw"

    printf -v new_cmd_expanded "%b" "$new_cmd"
    echo -e "$new_cmd_expanded" | sudo tee "$pp_od_file" > /dev/null
    echo "c" | sudo tee "$pp_od_file" > /dev/null
    GPU_MAX_FREQ="$requested_freq"
    save_config
}

get_current_freq() {
    case "$1" in
        intel|mali|adreno)
            [[ -f "$GPU_FREQ_PATH" ]] && cat "$GPU_FREQ_PATH" || echo "Unavailable"
            ;;
        amd)
            [[ -f "$GPU_FREQ_PATH" ]] && grep '*' "$GPU_FREQ_PATH" | awk '{print $2}' || echo "Unavailable"
            ;;
        *)
            echo "Unsupported GPU type"
            ;;
    esac
}

help() {
    echo "${MAGENTA}"
    echo "╔══════════════════════════════════════════════════════════════════════════════════════════════════════════════════╗"
    echo "║                                         GPUControl commands with examples:                                       ║"
    echo "║  gpucontrol                     # Show current GPU info and frequency                                            ║"
    echo "║  sudo gpucontrol restore        # Restore GPU max frequency to original value                                    ║"
    echo "║  sudo gpucontrol amd 800        # Set AMD GPU max frequency to 800 MHz                                           ║"
    echo "║  sudo gpucontrol intel 700      # Set Intel GPU max frequency to 700 MHz                                         ║"
    echo "║  sudo gpucontrol adreno 500000  # Set Adreno GPU max frequency to 500000 kHz (500 MHz)                           ║"
    echo "║  sudo gpucontrol mali 600000    # Set Mali GPU max frequency to 600000 kHz (600 MHz)                             ║"
    echo "║  sudo gpucontrol startup        # Enable or disable GPUControl on startup                                        ║"
    echo "║  sudo gpucontrol help           # Show this help menu                                                            ║"
    echo "╚══════════════════════════════════════════════════════════════════════════════════════════════════════════════════╝"
    echo "${RESET}"
}

case "$1" in
    --h|-h|h|--help|-help|help)
        help
        exit 0
        ;;
    restore)
        echo "${YELLOW}Restoring GPU to original max frequency...${RESET}"
        case "$GPU_TYPE" in
            intel|adreno|mali)
                [[ -w "$GPU_FREQ_PATH" ]] && echo "$ORIGINAL_GPU_MAX_FREQ" | sudo tee "$GPU_FREQ_PATH" > /dev/null
                ;;
            amd)
                amd_set_max_freq "$ORIGINAL_GPU_MAX_FREQ"
                ;;
            *)
                echo "${RED}Restore not supported for GPU type: $GPU_TYPE${RESET}"
                exit 1
                ;;
        esac
        echo "${GREEN}GPU frequency restored to original: $ORIGINAL_GPU_MAX_FREQ${RESET}"
        exit 0
        ;;
    startup)
        CONF_SOURCE="$INSTALL_DIR/gpucontrol.conf"
        CONF_TARGET="/etc/init/gpucontrol.conf"
        read -p "Enable GPUControl on startup with delay? (y/n): " choice
        if [[ "$choice" =~ ^[Yy]$ ]]; then
            sudo cp "$CONF_SOURCE" "$CONF_TARGET" && echo "${GREEN}Startup enabled.${RESET}"
        else
            sudo rm -f "$CONF_TARGET" && echo "${YELLOW}Startup disabled.${RESET}"
        fi
        exit 0
        ;;
esac

if [[ $# -eq 0 ]]; then
    case "$GPU_TYPE" in
        amd) amd_set_max_freq "$GPU_MAX_FREQ" ;;
        intel|mali|adreno) echo "$GPU_MAX_FREQ" | sudo tee "$GPU_FREQ_PATH" > /dev/null ;;
    esac

    echo "${MAGENTA}"
    echo "═══════════════════════════════════════════════════"
    echo -n "GPUControl Max Frequency: ${RESET}${BOLD}${MAGENTA}"
    get_current_freq "$GPU_TYPE"
    echo "${RESET}${MAGENTA}"
    echo "GPU Type: $GPU_TYPE"
    echo "Default Max Frequency: $ORIGINAL_GPU_MAX_FREQ"
    echo "═══════════════════════════════════════════════════"
    echo "${RESET}"

    if [[ "$GPU_TYPE" == "amd" && -f "$PP_OD_FILE" ]]; then
        echo "${MAGENTA}Available AMD SCLK States:${RESET}"
        grep -i '^sclk' "$PP_OD_FILE" | nl -v0 | while read -r index line; do
            freq=$(echo "$line" | sed -n 's/.*[[:space:]]\([0-9]\{2,\}\)[[:space:]]*[Mm][Hh][Zz].*/\1/p')
            marker=""
            [[ "$index" -eq "$AMD_SELECTED_SCLK_INDEX" ]] && marker="${GREEN}<-- SELECTED${RESET}"
            printf "║ Index %2d: %s MHz %s\n" "$index" "$freq" "$marker"
        done
    fi
    exit 0
fi

GPU_ARG=$(echo "$1" | tr '[:upper:]' '[:lower:]')
REQUESTED_FREQ="$2"

if [[ "$GPU_ARG" != "$GPU_TYPE" ]]; then
    echo "${RED}Error: GPU type '$GPU_ARG' does not match detected type '$GPU_TYPE'.${RESET}"
    exit 1
fi

if ! [[ "$REQUESTED_FREQ" =~ ^[0-9]+$ ]]; then
    echo "${RED}Error: Frequency must be a whole number.${RESET}"
    help
    exit 1
fi

# Dispatch to backend
case "$GPU_ARG" in
    intel|mali|adreno)
        UNIT="kHz"
        [[ "$GPU_ARG" == "intel" ]] && UNIT="MHz"
        FREQ_KHZ=$REQUESTED_FREQ
        [[ "$FREQ_KHZ" -lt 10000 && "$UNIT" == "kHz" ]] && FREQ_KHZ=$((REQUESTED_FREQ * 1000))

        if (( FREQ_KHZ > ORIGINAL_GPU_MAX_FREQ )); then
            echo "${RED}Error: Frequency exceeds max allowed.${RESET}"
            exit 1
        fi

        echo "$FREQ_KHZ" | sudo tee "$GPU_FREQ_PATH" > /dev/null
        echo "${GREEN}$GPU_ARG GPU frequency set to $FREQ_KHZ $UNIT${RESET}" | tee -a "$LOG_FILE"
        GPU_MAX_FREQ="$REQUESTED_FREQ"
        save_config
        ;;
    amd)
        amd_set_max_freq "$REQUESTED_FREQ"
        echo "${GREEN}AMD GPU frequency set to $REQUESTED_FREQ MHz${RESET}" | tee -a "$LOG_FILE"
        ;;
    *)
        echo "${RED}Unsupported GPU type '$GPU_ARG'.${RESET}"
        help
        exit 1
        ;;
esac

exit 0
